// <auto-generated />
using System;
using LeetBot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LeetBot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250510091205_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LeetBot.Models.Challenge", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ChallengerId")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .HasColumnType("text");

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("OpponentId")
                        .HasColumnType("text");

                    b.Property<string>("ProblemLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TitleSlug")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChallengerId")
                        .IsUnique();

                    b.HasIndex("OpponentId")
                        .IsUnique();

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("LeetBot.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("EasyWon")
                        .HasColumnType("integer");

                    b.Property<int>("GamePlayed")
                        .HasColumnType("integer");

                    b.Property<int>("GameWon")
                        .HasColumnType("integer");

                    b.Property<long?>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("HardWon")
                        .HasColumnType("integer");

                    b.Property<string>("LeetCodeUsername")
                        .HasColumnType("text");

                    b.Property<int>("MediumWon")
                        .HasColumnType("integer");

                    b.Property<string>("Mention")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LeetBot.Models.Challenge", b =>
                {
                    b.HasOne("LeetBot.Models.User", "Challenger")
                        .WithOne()
                        .HasForeignKey("LeetBot.Models.Challenge", "ChallengerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeetBot.Models.User", "Opponent")
                        .WithOne()
                        .HasForeignKey("LeetBot.Models.Challenge", "OpponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Challenger");

                    b.Navigation("Opponent");
                });
#pragma warning restore 612, 618
        }
    }
}
